// dllmain.cpp : Defines the entry point for the DLL application.
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include <vector>
//#include "toml.hpp"

void* addr = nullptr;

//toml::table cfg_file;
//bool cfg_mysetting = false;

void InjectCode(void* address, const std::vector<uint8_t> data)
{
    const size_t byteCount = data.size() * sizeof(uint8_t);

    DWORD oldProtect;
    VirtualProtect(address, byteCount, PAGE_EXECUTE_READWRITE, &oldProtect);
    memcpy(address, data.data(), byteCount);
    VirtualProtect(address, byteCount, oldProtect, nullptr);
}

BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
                     )
{
    switch (ul_reason_for_call)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_PROCESS_DETACH:
        break;
	}

	return TRUE;
}

extern "C"
{
	__declspec(dllexport) void PreInit()
	{
        //1.02
        InjectCode((void*)0x140075C27, { 0xD9, 0xF3, 0x93, 0x01 }); //0x14114C664 -> 0x1419B5004 (sys.dat start)
        InjectCode((void*)0x140075C33, { 0x0D, 0xFC, 0x29, 0x02 }); //0x1412B63E4 -> 0x142315844
        InjectCode((void*)0x140075C3F, { 0xA5, 0xFD, 0x29, 0x02 }); //0x1412B6588 -> 0x1423159E8

        InjectCode((void*)0x1401A92E4, { 0xA0, 0x07, 0x96 }); //tutorial/startup flags
        InjectCode((void*)0x1401A92F4, { 0xA0, 0x07, 0x96 }); //tutorial/startup flags
        InjectCode((void*)0x1401A9927, { 0xA3, 0x07, 0x96 }); //tutorial/startup flags

        InjectCode((void*)0x1401D5217, { 0x64, 0x00, 0x96 });
        InjectCode((void*)0x1401D521F, { 0x6C, 0x00, 0x96 });
        InjectCode((void*)0x1401D5226, { 0xA0, 0x07, 0x96 });

        InjectCode((void*)0x1401D5246, { 0xD0, 0x07 }); //amount of score templates to create/read
        InjectCode((void*)0x1401D53DF, { 0xD0, 0x07 }); //amount of score templates to create/read

        InjectCode((void*)0x1401D5B5A, { 0xD0, 0x07 }); //amount of score templates to create/read

        InjectCode((void*)0x1401D5276, { 0x00, 0xEF, 0x95 });
        InjectCode((void*)0x1401D528F, { 0x28, 0xF8, 0x95 });
        InjectCode((void*)0x1401D529B, { 0xDC, 0xFE, 0x95 });
        InjectCode((void*)0x1401D52A2, { 0xD4, 0xFE, 0x95 });
        InjectCode((void*)0x1401D52F3, { 0x00, 0xE7, 0x95 }); //Score templates end (bytes)
        InjectCode((void*)0x1401D5335, { 0x00, 0xE7, 0x95 }); //Score templates end (bytes)
        InjectCode((void*)0x1401D5340, { 0x00, 0xE7, 0x95 }); //Score templates end (bytes)
        InjectCode((void*)0x1401D534B, { 0x00, 0xE7, 0x95 }); //Score templates end (bytes)
        InjectCode((void*)0x1401D5356, { 0x00, 0xE7, 0x95 }); //Score templates end (bytes)
        InjectCode((void*)0x1401D536B, { 0x00, 0xEF, 0x95 });
        InjectCode((void*)0x1401D53AB, { 0x00, 0xEF, 0x95 });
        InjectCode((void*)0x1401D53B6, { 0x00, 0xEF, 0x95 });
        InjectCode((void*)0x1401D53C1, { 0x00, 0xEF, 0x95 });
        InjectCode((void*)0x1401D53CC, { 0x00, 0xEF, 0x95 });
        InjectCode((void*)0x1401D53FB, { 0x28, 0xF8, 0x95 });
        InjectCode((void*)0x1401D5407, { 0xDC, 0xFE, 0x95 });
        InjectCode((void*)0x1401D545D, { 0xD4, 0xFE, 0x95 });
        InjectCode((void*)0x1401D547D, { 0xD4, 0xFE, 0x95 });
        InjectCode((void*)0x1401D57B1, { 0x28, 0xF8, 0x95 });
        InjectCode((void*)0x1401D5812, { 0x00, 0xE7, 0x95 }); //Score templates end (bytes)
        InjectCode((void*)0x1401D5830, { 0x00, 0xE7, 0x95 }); //Score templates end (bytes)
        InjectCode((void*)0x1401D583C, { 0x00, 0xE7, 0x95 }); //Score templates end (bytes)
        InjectCode((void*)0x1401D5848, { 0x00, 0xE7, 0x95 }); //Score templates end (bytes)
        InjectCode((void*)0x1401D5854, { 0x00, 0xE7, 0x95 }); //Score templates end (bytes)
        InjectCode((void*)0x1401D5889, { 0x00, 0xEF, 0x95 });
        InjectCode((void*)0x1401D58A9, { 0x00, 0xEF, 0x95 });
        InjectCode((void*)0x1401D58B5, { 0x00, 0xEF, 0x95 });
        InjectCode((void*)0x1401D58C1, { 0x00, 0xEF, 0x95 });
        InjectCode((void*)0x1401D5C73, { 0x28, 0xF8, 0x95 });
        InjectCode((void*)0x1401D5CAD, { 0x00, 0xEF, 0x95 });
        InjectCode((void*)0x1401D5CC3, { 0x00, 0xF5, 0x95 });
        InjectCode((void*)0x1401D5CD6, { 0xC4, 0x00, 0x96 });
        InjectCode((void*)0x1401D5D14, { 0x70, 0x00, 0x96 });
        InjectCode((void*)0x1401D5D1F, { 0xC4, 0x00, 0x96 });
        InjectCode((void*)0x1401D5D2E, { 0x70, 0x00, 0x96 });
        InjectCode((void*)0x1401D5DD0, { 0x28, 0xF8, 0x95 });
        InjectCode((void*)0x1401D5DE6, { 0xC4, 0x00, 0x96 });
        InjectCode((void*)0x1401D5E0E, { 0x70, 0x00, 0x96 });
        InjectCode((void*)0x1401D5E52, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x1401D5E60, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x1401D5E67, { 0x28, 0xF8, 0x95 });
        InjectCode((void*)0x1401D5EE0, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x1401D5EEE, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x1401D5EF5, { 0x28, 0xF8, 0x95 });
        InjectCode((void*)0x1401D5FC8, { 0xD4, 0xFE, 0x95 });
        InjectCode((void*)0x1401D5FD2, { 0xD8, 0xFE, 0x95 });
        InjectCode((void*)0x1401D60D4, { 0x68, 0x00, 0x96 });
        InjectCode((void*)0x1401D60DB, { 0x6C, 0x00, 0x96 });
        InjectCode((void*)0x1401D60E2, { 0x64, 0x00, 0x96 });
        InjectCode((void*)0x1401D6106, { 0x64, 0x00, 0x96 });
        InjectCode((void*)0x1401D611D, { 0x64, 0x00, 0x96 });
        InjectCode((void*)0x1401D6134, { 0x64, 0x00, 0x96 });
        InjectCode((void*)0x1401D614B, { 0x68, 0x00, 0x96 });
        InjectCode((void*)0x1401D6162, { 0x68, 0x00, 0x96 });
        InjectCode((void*)0x1401D6179, { 0x68, 0x00, 0x96 });
        InjectCode((void*)0x1401D61B2, { 0x68, 0x00, 0x96 });
        InjectCode((void*)0x1401D61B9, { 0x6C, 0x00, 0x96 });
        InjectCode((void*)0x1401D61C0, { 0x64, 0x00, 0x96 });


        InjectCode((void*)0x1401D64E3, { 0x59, 0xF3, 0x13, 0x02 }); //0x1412B63E0 -> 0x142315840 (visual setting; Mega Mix/Future Tone)
        InjectCode((void*)0x1401D64F2, { 0x4A, 0xF3, 0x13, 0x02 }); //0x1412B63E0 -> 0x142315840 (visual setting; Mega Mix/Future Tone)
        InjectCode((void*)0x1401D6503, { 0xFD, 0xEA, 0x7D, 0x01 }); //0x14114C664 -> 0x1419B5004 (sys.dat start)
        InjectCode((void*)0x1401D6513, { 0x95, 0xF2, 0x13, 0x02 }); //0x1412B634C -> 0x1423157AC (last song selected)
        InjectCode((void*)0x1401D6523, { 0xC5, 0xF2, 0x13, 0x02 }); //0x1412B638C -> 0x1423157EC
        InjectCode((void*)0x1401D6533, { 0xD5, 0xF2, 0x13, 0x02 }); //0x1412B63AC -> 0x14231580C
        InjectCode((void*)0x1401D6543, { 0xC5, 0xF2, 0x13, 0x02 }); //0x1412B63AC -> 0x14231580C
        InjectCode((void*)0x1401D6553, { 0xC5, 0xF2, 0x13, 0x02 }); //0x1412B63BC -> 0x14231581C (sound config options)
        InjectCode((void*)0x1401D6583, { 0xBD, 0xF2, 0x13, 0x02 }); //0x1412B63E4 -> 0x142315844
        InjectCode((void*)0x1401D6593, { 0x51, 0xF4, 0x13, 0x02 }); //0x1412B6588 -> 0x1423159E8
        InjectCode((void*)0x1401D6623, { 0xC9, 0xF3, 0x13, 0x02 }); //0x1412B6590 -> 0x1423159F0
        InjectCode((void*)0x1401D6633, { 0xCD, 0xF1, 0x13, 0x02 }); //0x1412B63A4 -> 0x142315804
        InjectCode((void*)0x1401D800E, { 0x08, 0x0A, 0x96 }); //Total size of score data (bytes)
        InjectCode((void*)0x1401D8044, { 0x08, 0x0A, 0x96 }); //Total size of score data (bytes)

        InjectCode((void*)0x1401D80BE, { 0x10, 0x0A, 0x96 });

        InjectCode((void*)0x1401D810F, { 0x00, 0x08, 0x99 });
        InjectCode((void*)0x1401D81AA, { 0xC8, 0x06, 0x99 });
        InjectCode((void*)0x1401D8258, { 0x00, 0x08, 0x99 });
        InjectCode((void*)0x1401D837C, { 0x08, 0x0A, 0x96 }); //Total size of score data (bytes)
        InjectCode((void*)0x1401D843F, { 0x08, 0x0A, 0x96 }); //Total size of score data (bytes)

        InjectCode((void*)0x1401D864D, { 0x10, 0x0A, 0x96 });

        InjectCode((void*)0x1401D8874, { 0xC8, 0x06, 0x99 });
        InjectCode((void*)0x1401D891B, { 0x00, 0x08, 0x99 });

        InjectCode((void*)0x1401D8B32, { 0xFD, 0x07, 0x99 });
        InjectCode((void*)0x1401D8B54, { 0x00, 0x08, 0x99 });
        InjectCode((void*)0x1401D8B79, { 0xFC, 0x07, 0x99 });

        InjectCode((void*)0x1401D8B94, { 0x08, 0x08, 0x99 }); //Total size of all save data (doesn't include tshirts)

        InjectCode((void*)0x1401D8BDD, { 0xFD, 0x07, 0x99 });

        InjectCode((void*)0x1401D8CFB, { 0x01, 0xC3, 0x7D, 0x01 }); //0x14114C660 -> 0x1419B5000 loads the saved savedata

        InjectCode((void*)0x1401D8D23, { 0x08, 0x08, 0x99 }); //Total size of all save data (doesn't include tshirts)

        InjectCode((void*)0x1401D8D65, { 0x97, 0xC2, 0x7D, 0x01 }); //0x14114C660 -> 0x1419B5000
        InjectCode((void*)0x1401D8D82, { 0x4C, 0x08, 0x96 });
        InjectCode((void*)0x1401D8D8E, { 0xF0, 0x09, 0x96 });
        InjectCode((void*)0x1401D8D9A, { 0xC8, 0x06, 0x99 });
        InjectCode((void*)0x1401D8DB9, { 0xFC, 0x07, 0x99 });
        InjectCode((void*)0x1401D8DBF, { 0xFD, 0x07, 0x99 });
        InjectCode((void*)0x1401D8DC7, { 0x00, 0x08, 0x99 });
        InjectCode((void*)0x1401D8DD2, { 0x08, 0x0A, 0x96 }); //Total size of score data (bytes)

        InjectCode((void*)0x1401D8DEA, { 0x10, 0x0A, 0x96 });

        InjectCode((void*)0x1401D93DB, { 0xFD, 0x07, 0x99 });

        InjectCode((void*)0x1401D9436, { 0x08, 0x08, 0x99 }); //Total size of all save data (doesn't include tshirts)

        InjectCode((void*)0x1401EA529, { 0xA0, 0x07, 0x96 }); //tutorial/startup flags
        InjectCode((void*)0x1401EA62D, { 0xA0, 0x07, 0x96 }); //tutorial/startup flags
        InjectCode((void*)0x1401EA704, { 0xA0, 0x07, 0x96 }); //tutorial/startup flags

        InjectCode((void*)0x140204BEA, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x140204C05, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x14020FDC3, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x14020FE4F, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x140277503, { 0xA0, 0x07, 0x96 }); //tutorial/startup flags
        InjectCode((void*)0x14027755A, { 0xA0, 0x07, 0x96 }); //tutorial/startup flags
        InjectCode((void*)0x1402775EB, { 0xA0, 0x07, 0x96 }); //tutorial/startup flags
        InjectCode((void*)0x140277641, { 0xA0, 0x07, 0x96 }); //tutorial/startup flags

        InjectCode((void*)0x14064C832, { 0x90, 0x90, 0x90, 0x90, 0x90 }); //Leaderboard disable

        InjectCode((void*)0x14067D570, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x14067D845, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x14067FF80, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x140680883, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x140680BCB, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x1406814BA, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x1406817EB, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x14068180C, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x14068181E, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x1406971DC, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x140699445, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x1406BA67F, { 0xA0, 0x07, 0x96 });
        InjectCode((void*)0x1406BA690, { 0xA0, 0x07, 0x96 });
        InjectCode((void*)0x1406DE2BD, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x1406EF548, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x1406F0428, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x1406F0444, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x1406F046B, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x1406F3F1F, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x1406FA4C1, { 0xD0, 0xFE, 0x95 });

        InjectCode((void*)0x140C81930, { 0x4E, 0x4F, 0x56, 0x41 }); //SEGA folder to NOVA

        InjectCode((void*)0x14E402FC1, { 0x00, 0xE7, 0x95 }); //Score templates end (bytes)
        InjectCode((void*)0x14E402FF7, { 0x00, 0xEF, 0x95 });
        InjectCode((void*)0x14E40301D, { 0x00, 0xF5, 0x95 });
        InjectCode((void*)0x14E40302B, { 0x02, 0xF5, 0x95 });
        InjectCode((void*)0x14E403052, { 0x24, 0xF8, 0x95 });
        InjectCode((void*)0x14E40305D, { 0xD8, 0xF8, 0x95 });
        InjectCode((void*)0x14E4030C0, { 0x28, 0xF8, 0x95 });
        InjectCode((void*)0x14E4030CC, { 0xDC, 0xFE, 0x95 });
        InjectCode((void*)0x14E4030D8, { 0x70, 0x00, 0x96 });

        InjectCode((void*)0x14E419086, { 0xD0, 0x07 }); //amount of score templates to create/read
        InjectCode((void*)0x14E4190A1, { 0xD0, 0x07 }); //amount of score templates to create/read
        InjectCode((void*)0x14E420610, { 0xD0, 0x07 }); //amount of score templates to create/read

        InjectCode((void*)0x14E421BC7, { 0xDC, 0xFE, 0x95 });
        InjectCode((void*)0x14E421BD2, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x14E421BDC, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x14E421BE3, { 0x28, 0xF8, 0x95 });

        InjectCode((void*)0x14E60982D, { 0xD3, 0xB7, 0x3A, 0xF3 }); //0x14114C664 -> 0x1419B5004 (sys.dat start)
        InjectCode((void*)0x14E609833, { 0xC9, 0xB7, 0x3A, 0xF3 }); //0x14114C660 -> 0x1419B5000
        InjectCode((void*)0x14E609839, { 0xCA, 0xC1, 0xD0, 0xF3 }); //0x1412B65A8 -> 0x142315A08
        InjectCode((void*)0x14E609846, { 0x62, 0xBF, 0xD0, 0xF3 }); //0x1412B634C -> 0x1423157AC (last song selected)
        InjectCode((void*)0x14E609852, { 0x96, 0xBF, 0xD0, 0xF3 }); //0x1412B638C -> 0x1423157EC
        InjectCode((void*)0x14E60985E, { 0xA2, 0xBF, 0xD0, 0xF3 }); //0x1412B63A4 -> 0x142315804
        InjectCode((void*)0x14E60986A, { 0x9E, 0xBF, 0xD0, 0xF3 }); //0x1412B63AC -> 0x14231580C
        InjectCode((void*)0x14E609876, { 0xA2, 0xBF, 0xD0, 0xF3 }); //0x1412B63BC -> 0x14231581C (sound config options)
        InjectCode((void*)0x14E609889, { 0xB2, 0xBF, 0xD0, 0xF3 }); //0x1412B63E0 -> 0x142315840 (visual setting; Mega Mix/Future Tone)
        InjectCode((void*)0x14E609891, { 0xAF, 0xBF, 0xD0, 0xF3 }); //0x1412B63E4 -> 0x142315844
        InjectCode((void*)0x14E60989D, { 0x47, 0xC1, 0xD0, 0xF3 }); //0x1412B6588 -> 0x1423159E8
        InjectCode((void*)0x14E6098A9, { 0x43, 0xC1, 0xD0, 0xF3 }); //0x1412B6590 -> 0x1423159F0
        InjectCode((void*)0x14E6098B5, { 0x43, 0xC1, 0xD0, 0xF3 }); //0x1412B65A0 -> 0x142315A00
        InjectCode((void*)0x14E612D45, { 0x00, 0x08, 0x99 });
        InjectCode((void*)0x14E612D53, { 0xC8, 0x06, 0x99 });
        InjectCode((void*)0x14E612DFA, { 0x41, 0xB8, 0x08, 0x0A, 0x96, 0x00 }); //adds back the byte size value for sys.dat - this reads the saved data when the game is booted
        InjectCode((void*)0x14E612E00, { 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 }); //nops useless XOR instruction
        InjectCode((void*)0x14E612E06, { 0x90, 0x90, 0x90 }); //nops changed MOV instruction
        InjectCode((void*)0x14E612DEB, { 0x00, 0x08, 0x99 });
        InjectCode((void*)0x14E612E0C, { 0xF0, 0x21, 0x3A, 0xF3 }); //0x14114C660 -> 0x1419B5000
        InjectCode((void*)0x14E612E18, { 0x10, 0x0A, 0x96 });
        InjectCode((void*)0x15E381805, { 0xA0, 0x07, 0x96 }); //tutorial/startup flags
        InjectCode((void*)0x15E381827, { 0xA0, 0x07, 0x96 }); //tutorial/startup flags
        InjectCode((void*)0x15E41A782, { 0xA0, 0x07, 0x96 }); //tutorial/startup flags
        InjectCode((void*)0x15E41A798, { 0xA0, 0x07, 0x96 }); //tutorial/startup flags
        InjectCode((void*)0x15FBC72BA, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x15FBCB63E, { 0xD0, 0xFE, 0x95 });
        InjectCode((void*)0x161DDAB79, { 0xD0, 0xFE, 0x95 });
	}
}
